{
  "0a1d4ef5": {
    "task_id": "0a1d4ef5",
    "total_programs": 32,
    "valid_programs": 0,
    "valid_ratio": 0.0,
    "majority_output": null,
    "first_program_output": [
      [
        8,
        4,
        8
      ],
      [
        3,
        7,
        3
      ],
      [
        2,
        8,
        4
      ]
    ],
    "test_output": [
      [
        2,
        3,
        3
      ],
      [
        4,
        7,
        1
      ],
      [
        1,
        3,
        7
      ],
      [
        4,
        6,
        2
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [],
    "training_predictions": {},
    "timed_out": false,
    "elapsed_time": 1.1170530319213867
  },
  "692cd3b6": {
    "task_id": "692cd3b6",
    "total_programs": 32,
    "valid_programs": 0,
    "valid_ratio": 0.0,
    "majority_output": null,
    "first_program_output": [
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        4,
        4,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        5,
        4,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        4,
        4,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        4,
        4,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        4,
        5,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        4,
        4,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    ],
    "test_output": [
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        2,
        2,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        5,
        4,
        4,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        2,
        2,
        4,
        0,
        0
      ],
      [
        0,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        0,
        0
      ],
      [
        0,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        0,
        0
      ],
      [
        0,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        0,
        0
      ],
      [
        0,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        0,
        0
      ],
      [
        0,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        0,
        0
      ],
      [
        0,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        0,
        0
      ],
      [
        0,
        4,
        2,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        4,
        4,
        5,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        2,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [],
    "training_predictions": {},
    "timed_out": false,
    "elapsed_time": 1.2114050388336182
  },
  "1da012fc": {
    "task_id": "1da012fc",
    "total_programs": 32,
    "valid_programs": 0,
    "valid_ratio": 0.0,
    "majority_output": null,
    "first_program_output": [
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        2,
        2,
        0,
        0,
        0,
        0,
        2,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        2,
        2,
        2,
        2,
        0,
        0,
        2,
        0,
        2,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        2,
        2,
        0,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        3,
        5,
        5,
        5,
        4,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        2,
        0,
        0,
        5,
        5,
        5,
        2,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        0,
        2,
        2,
        2,
        0,
        0,
        0,
        0,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        2,
        0,
        0,
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        2,
        5,
        5,
        5,
        6,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ]
    ],
    "test_output": [
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        3,
        3,
        0,
        0,
        0,
        0,
        4,
        4,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        3,
        3,
        3,
        3,
        0,
        0,
        4,
        0,
        4,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        3,
        3,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        8,
        8,
        8,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        8,
        8,
        0,
        8,
        8,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        8,
        8,
        8,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        3,
        5,
        5,
        5,
        4,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        6,
        0,
        0,
        6,
        0,
        0,
        5,
        5,
        5,
        8,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        0,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        6,
        6,
        6,
        6,
        6,
        6,
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        6,
        6,
        0,
        0,
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        1,
        5,
        5,
        5,
        6,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [],
    "training_predictions": {},
    "timed_out": false,
    "elapsed_time": 1.1293718814849854
  },
  "66e6c45b": {
    "task_id": "66e6c45b",
    "total_programs": 32,
    "valid_programs": 15,
    "valid_ratio": 0.46875,
    "majority_output": [
      [
        2,
        0,
        0,
        3
      ],
      [
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0
      ],
      [
        4,
        0,
        0,
        9
      ]
    ],
    "first_program_output": [
      [
        2,
        0,
        0,
        3
      ],
      [
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0
      ],
      [
        4,
        0,
        0,
        9
      ]
    ],
    "test_output": [
      [
        2,
        0,
        0,
        3
      ],
      [
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0
      ],
      [
        4,
        0,
        0,
        9
      ]
    ],
    "test_correct": true,
    "valid_program_examples": [
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    a = grid[1][1]\n    b = grid[1][2]\n    c = grid[2][1]\n    d = grid[2][2]\n    output = [[0] * len(grid[0]) for _ in range(len(grid))]\n    output[0][0] = a\n    output[0][-1] = b\n    output[-1][0] = c\n    output[-1][-1] = d\n    return output",
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    n = len(grid)\n    output_grid = [[0] * n for _ in range(n)]\n    \n    output_grid[0][0] = grid[1][1]\n    output_grid[0][n-1] = grid[1][n-2]\n    output_grid[n-1][0] = grid[2][1]\n    output_grid[n-1][n-1] = grid[2][n-2]\n    \n    return output_grid",
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    n = len(grid)\n    output_grid = [[0] * n for _ in range(n)]\n    \n    output_grid[0][0] = grid[1][1]\n    output_grid[0][n-1] = grid[1][2]\n    output_grid[n-1][0] = grid[2][1]\n    output_grid[n-1][n-1] = grid[2][2]\n    \n    return output_grid"
    ],
    "training_predictions": {
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    a = grid[1][1]\n    b = grid[1][2]\n    c = grid[2][1]\n    d = grid[2][2]\n    output = [[0] * len(grid[0]) for _ in range(len(grid))]\n    output[0][0] = a\n    output[0][-1] = b\n    output[-1][0] = c\n    output[-1][-1] = d\n    return output": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    n = len(grid)\n    output_grid = [[0] * n for _ in range(n)]\n    \n    output_grid[0][0] = grid[1][1]\n    output_grid[0][n-1] = grid[1][n-2]\n    output_grid[n-1][0] = grid[2][1]\n    output_grid[n-1][n-1] = grid[2][n-2]\n    \n    return output_grid": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    n = len(grid)\n    output_grid = [[0] * n for _ in range(n)]\n    \n    output_grid[0][0] = grid[1][1]\n    output_grid[0][n-1] = grid[1][2]\n    output_grid[n-1][0] = grid[2][1]\n    output_grid[n-1][n-1] = grid[2][2]\n    \n    return output_grid": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    result = [[0] * len(grid[0]) for _ in range(len(grid))]\n    \n    if len(grid) >= 4 and len(grid[0]) >= 4:\n        result[0][0] = grid[1][1]\n        result[0][-1] = grid[1][2]\n        result[-1][0] = grid[2][1]\n        result[-1][-1] = grid[2][2]\n        \n    return result": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    a = grid[1][1]\n    b = grid[1][2]\n    c = grid[2][1]\n    d = grid[2][2]\n    \n    output = [[0] * cols for _ in range(rows)]\n    \n    output[0][0] = a\n    output[0][cols-1] = b\n    output[rows-1][0] = c\n    output[rows-1][cols-1] = d\n    \n    return output": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    n = len(grid)\n    new_grid = [[0] * n for _ in range(n)]\n    \n    vals = []\n    for i in range(1, n - 1):\n        for j in range(1, n - 1):\n            vals.append(grid[i][j])\n            \n    new_grid[0][0] = vals[0]\n    new_grid[0][n - 1] = vals[1]\n    new_grid[n - 1][0] = vals[2]\n    new_grid[n - 1][n - 1] = vals[3]\n    \n    return new_grid": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    a = grid[1][1]\n    b = grid[1][2]\n    c = grid[2][1]\n    d = grid[2][2]\n    \n    new_grid = [[0] * cols for _ in range(rows)]\n    \n    new_grid[0][0] = a\n    new_grid[0][cols-1] = b\n    new_grid[rows-1][0] = c\n    new_grid[rows-1][cols-1] = d\n    \n    return new_grid": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    n = len(grid)\n    m = len(grid[0])\n    output_grid = [[0] * m for _ in range(n)]\n    \n    val1 = grid[1][1]\n    val2 = grid[1][2]\n    val3 = grid[2][1]\n    val4 = grid[2][2]\n    \n    output_grid[0][0] = val1\n    output_grid[0][m-1] = val2\n    output_grid[n-1][0] = val3\n    output_grid[n-1][m-1] = val4\n    \n    return output_grid": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    n = len(grid)\n    output_grid = [[0] * n for _ in range(n)]\n\n    output_grid[0][0] = grid[1][1]\n    output_grid[0][n - 1] = grid[1][2]\n    output_grid[n - 1][0] = grid[2][1]\n    output_grid[n - 1][n - 1] = grid[2][2]\n\n    return output_grid": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    a = grid[1][1]\n    b = grid[1][2]\n    c = grid[2][1]\n    d = grid[2][2]\n    \n    output_grid = [[0 for _ in range(cols)] for _ in range(rows)]\n    \n    output_grid[0][0] = a\n    output_grid[0][cols - 1] = b\n    output_grid[rows - 1][0] = c\n    output_grid[rows - 1][cols - 1] = d\n    \n    return output_grid": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    output_grid = [[0 for _ in range(cols)] for _ in range(rows)]\n    \n    output_grid[0][0] = grid[1][1]\n    output_grid[0][cols - 1] = grid[1][2]\n    output_grid[rows - 1][0] = grid[2][1]\n    output_grid[rows - 1][cols - 1] = grid[2][2]\n    \n    return output_grid": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    output_grid = [[0] * len(grid[0]) for _ in range(len(grid))]\n    \n    output_grid[0][0] = grid[1][1]\n    output_grid[0][len(grid[0]) - 1] = grid[1][len(grid[0]) - 2]\n    output_grid[len(grid) - 1][0] = grid[len(grid) - 2][1]\n    output_grid[len(grid) - 1][len(grid[0]) - 1] = grid[len(grid) - 2][len(grid[0]) - 2]\n    \n    return output_grid": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    output_grid = [[0 for _ in range(cols)] for _ in range(rows)]\n    \n    output_grid[0][0] = grid[1][1]\n    output_grid[0][cols-1] = grid[1][2]\n    output_grid[rows-1][0] = grid[2][1]\n    output_grid[rows-1][cols-1] = grid[2][2]\n    \n    return output_grid": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    n = len(grid)\n    output_grid = [[0] * n for _ in range(n)]\n    \n    if n >= 4:\n        output_grid[0][0] = grid[1][1]\n        output_grid[0][n-1] = grid[1][2]\n        output_grid[n-1][0] = grid[2][1]\n        output_grid[n-1][n-1] = grid[2][2]\n        \n    return output_grid": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    n = len(grid)\n    output_grid = [[0 for _ in range(n)] for _ in range(n)]\n    \n    val1 = grid[1][1]\n    val2 = grid[1][2]\n    val3 = grid[2][1]\n    val4 = grid[2][2]\n    \n    output_grid[0][0] = val1\n    output_grid[0][n-1] = val2\n    output_grid[n-1][0] = val3\n    output_grid[n-1][n-1] = val4\n    \n    return output_grid": [
        [
          [
            3,
            0,
            0,
            4
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            7,
            0,
            0,
            6
          ]
        ],
        [
          [
            5,
            0,
            0,
            6
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            3
          ]
        ]
      ]
    },
    "timed_out": false,
    "elapsed_time": 1.1486070156097412
  },
  "3194b014": {
    "task_id": "3194b014",
    "total_programs": 32,
    "valid_programs": 14,
    "valid_ratio": 0.4375,
    "majority_output": [
      [
        8,
        8,
        8
      ],
      [
        8,
        8,
        8
      ],
      [
        8,
        8,
        8
      ]
    ],
    "first_program_output": [
      [
        5,
        5,
        5
      ],
      [
        5,
        5,
        5
      ],
      [
        5,
        5,
        5
      ]
    ],
    "test_output": [
      [
        5,
        5,
        5
      ],
      [
        5,
        5,
        5
      ],
      [
        5,
        5,
        5
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    first_element = grid[0][0]\n    if first_element == 6:\n        return [[4, 4, 4], [4, 4, 4], [4, 4, 4]]\n    elif first_element == 8:\n        return [[3, 3, 3], [3, 3, 3], [3, 3, 3]]\n    elif first_element == 0:\n        return [[8, 8, 8], [8, 8, 8], [8, 8, 8]]\n    else:\n         return [[3, 3, 3], [3, 3, 3], [3, 3, 3]]",
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    m = len(grid)\n    n = len(grid[0])\n    \n    val = 0\n    \n    if m > 0 and n > 0:\n        val = grid[0][0]\n        \n        if val in [0,6,7,8]:\n            if val == 0:\n                val = 8\n            elif val == 6:\n                val = 4\n            elif val == 7:\n                val = 6\n            elif val == 8:\n                val = 3\n        else:\n            val = 8\n\n    \n    return [[val, val, val], [val, val, val], [val, val, val]]",
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    if not grid:\n        return [[]]\n\n    output_grid = [[0] * 3 for _ in range(3)]\n    \n    if len(grid) > 0 and len(grid[0]) > 0:\n        first_element = grid[0][0]\n        \n        if first_element in [6, 7, 8]:\n           replace_value = 4 if first_element == 6 else 3 if first_element == 8 else 8\n        elif first_element in [0,9]:\n           replace_value = 8\n        elif first_element == 3:\n           replace_value = 8\n        else:\n            replace_value = 8\n        \n        return [[replace_value] * 3 for _ in range(3)]\n\n    return output_grid"
    ],
    "training_predictions": {
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    first_element = grid[0][0]\n    if first_element == 6:\n        return [[4, 4, 4], [4, 4, 4], [4, 4, 4]]\n    elif first_element == 8:\n        return [[3, 3, 3], [3, 3, 3], [3, 3, 3]]\n    elif first_element == 0:\n        return [[8, 8, 8], [8, 8, 8], [8, 8, 8]]\n    else:\n         return [[3, 3, 3], [3, 3, 3], [3, 3, 3]]": [
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    m = len(grid)\n    n = len(grid[0])\n    \n    val = 0\n    \n    if m > 0 and n > 0:\n        val = grid[0][0]\n        \n        if val in [0,6,7,8]:\n            if val == 0:\n                val = 8\n            elif val == 6:\n                val = 4\n            elif val == 7:\n                val = 6\n            elif val == 8:\n                val = 3\n        else:\n            val = 8\n\n    \n    return [[val, val, val], [val, val, val], [val, val, val]]": [
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    if not grid:\n        return [[]]\n\n    output_grid = [[0] * 3 for _ in range(3)]\n    \n    if len(grid) > 0 and len(grid[0]) > 0:\n        first_element = grid[0][0]\n        \n        if first_element in [6, 7, 8]:\n           replace_value = 4 if first_element == 6 else 3 if first_element == 8 else 8\n        elif first_element in [0,9]:\n           replace_value = 8\n        elif first_element == 3:\n           replace_value = 8\n        else:\n            replace_value = 8\n        \n        return [[replace_value] * 3 for _ in range(3)]\n\n    return output_grid": [
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    first_element = grid[0][0]\n    if first_element == 6:\n        return [[4, 4, 4], [4, 4, 4], [4, 4, 4]]\n    elif first_element == 8:\n        return [[3, 3, 3], [3, 3, 3], [3, 3, 3]]\n    elif first_element == 0:\n        return [[8, 8, 8], [8, 8, 8], [8, 8, 8]]\n    else:\n        return [[0, 0, 0], [0, 0, 0], [0, 0, 0]]": [
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0]) if rows > 0 else 0\n    \n    if rows > 0 and cols >0:\n      first_element = grid[0][0]\n      \n      if first_element in [6, 8, 0]:\n          output_grid = [[4, 4, 4], [4, 4, 4], [4, 4, 4]] if first_element == 6 else [[3, 3, 3],[3, 3, 3],[3, 3, 3]] if first_element == 8 else [[8, 8, 8],[8, 8, 8],[8, 8, 8]]\n      else:\n          output_grid = [[0,0,0],[0,0,0],[0,0,0]]\n      return output_grid\n    else:\n      return []": [
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    if not grid:\n        return [[]]\n\n    output = [[0] * 3 for _ in range(3)]\n    \n    if all(all(x in [6,7,0,2,9,4] for x in row) for row in grid):\n        output = [[4, 4, 4], [4, 4, 4], [4, 4, 4]]\n    elif all(all(x in [8,1,0,9,3,4,5,7] for x in row) for row in grid):\n        output = [[3, 3, 3], [3, 3, 3], [3, 3, 3]]\n    elif all(all(x in [0, 3, 2, 8, 6, 9, 4] for x in row) for row in grid):\n        output = [[8, 8, 8], [8, 8, 8], [8, 8, 8]]\n    else:\n        output = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n\n                \n    return output": [
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    \n    if len(grid) > 0 and len(grid[0]) > 0:\n        first_element = grid[0][0]\n        \n        if first_element in [6, 8, 0]:\n            if first_element == 6:\n                filler = 4\n            elif first_element == 8:\n                filler = 3\n            else:\n                filler = 8\n                \n            return [[filler] * 3 for _ in range(3)]\n\n        elif first_element == 0:\n             filler = 8\n             return [[filler] * 3 for _ in range(3)]     \n            \n\n    return []": [
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    first_element = grid[0][0]\n    if first_element in {6, 7}:\n        return [[4, 4, 4], [4, 4, 4], [4, 4, 4]]\n    elif first_element in {8, 1}:\n        return [[3, 3, 3], [3, 3, 3], [3, 3, 3]]\n    elif first_element in {0, 2, 3}:\n        return [[8, 8, 8], [8, 8, 8], [8, 8, 8]]\n    else:\n        return [[0, 0, 0], [0, 0, 0], [0, 0, 0]]": [
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    first_element = grid[0][0]\n    \n    if first_element in [6, 7]:\n        return [[4, 4, 4], [4, 4, 4], [4, 4, 4]]\n    elif first_element in [8, 1]:\n        return [[3, 3, 3], [3, 3, 3], [3, 3, 3]]\n    elif first_element in [0, 3, 2]:\n        return [[8, 8, 8], [8, 8, 8], [8, 8, 8]]\n    else:\n        return [[0, 0, 0], [0, 0, 0], [0, 0, 0]]": [
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n\n    Args:\n        grid: A 2D list of integers representing the input grid\n\n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    first_element = grid[0][0]\n    if first_element in [6, 7]:\n        return [[4, 4, 4], [4, 4, 4], [4, 4, 4]]\n    elif first_element in [8, 1]:\n        return [[3, 3, 3], [3, 3, 3], [3, 3, 3]]\n    elif first_element in [0, 2, 3]:\n        return [[8, 8, 8], [8, 8, 8], [8, 8, 8]]\n    else: \n        return [[8, 8, 8], [8, 8, 8], [8, 8, 8]]": [
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    if not grid:\n        return [[]]\n    \n    first_element = grid[0][0]\n    \n    if first_element in [0, 6, 8, 9]:\n        output_value = 4 if first_element in [6] else 3 if first_element in [8, 9] else 8\n    else:\n        output_value= 8\n        \n    return [[output_value, output_value, output_value],\n            [output_value, output_value, output_value],\n            [output_value, output_value, output_value]]": [
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    \n    if len(grid) == 20 and len(grid[0]) == 20 and grid[0][0] == 6:\n        return [[4, 4, 4], [4, 4, 4], [4, 4, 4]]\n    elif len(grid) == 20 and len(grid[0]) == 20 and grid[0][0] == 8:\n        return [[3, 3, 3], [3, 3, 3], [3, 3, 3]]\n    elif len(grid) == 20 and len(grid[0]) == 20 and grid[0][0] == 0:\n        return [[8, 8, 8], [8, 8, 8], [8, 8, 8]]\n    else:\n        return [[5, 5, 5], [5, 5, 5], [5, 5, 5]]": [
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    \n    if len(grid) > 0 and len(grid[0]) > 0:\n        first_element = grid[0][0]\n        if first_element == 6:\n            return [[4, 4, 4], [4, 4, 4], [4, 4, 4]]\n        elif first_element == 8:\n            return [[3, 3, 3], [3, 3, 3], [3, 3, 3]]\n        elif first_element == 0:\n            return [[8, 8, 8], [8, 8, 8], [8, 8, 8]]\n           \n    return [[0, 0, 0], [0, 0, 0], [0, 0, 0]]": [
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ],
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Transform the input grid according to the pattern learned from training examples.\n    \n    Args:\n        grid: A 2D list of integers representing the input grid\n        \n    Returns:\n        A 2D list of integers representing the transformed output grid\n    \"\"\"\n    \n    if not grid:\n        return [[]]\n\n    output = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n    \n    if grid[0][0] == 6:\n      output = [[4, 4, 4], [4, 4, 4], [4, 4, 4]]\n    elif grid[0][0] == 8:\n      output = [[3, 3, 3], [3, 3, 3], [3, 3, 3]]\n    elif grid[0][0] == 0:\n      output = [[8, 8, 8], [8, 8, 8], [8, 8, 8]]\n    else:\n        output = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n\n    return output": [
        [
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ],
          [
            4,
            4,
            4
          ]
        ],
        [
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ],
          [
            3,
            3,
            3
          ]
        ],
        [
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ],
          [
            8,
            8,
            8
          ]
        ]
      ]
    },
    "timed_out": false,
    "elapsed_time": 1.1462931632995605
  },
  "963f59bc": {
    "task_id": "963f59bc",
    "error": "Task timed out after 30.0 seconds",
    "timed_out": true
  },
  "d37a1ef5": {
    "task_id": "d37a1ef5",
    "total_programs": 32,
    "valid_programs": 0,
    "valid_ratio": 0.0,
    "majority_output": null,
    "first_program_output": [
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0
      ],
      [
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0
      ],
      [
        0,
        0,
        2,
        0,
        5,
        0,
        0,
        0,
        0,
        0,
        2,
        0
      ],
      [
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        5,
        0,
        0,
        2,
        0
      ],
      [
        0,
        0,
        2,
        0,
        0,
        0,
        5,
        0,
        0,
        0,
        2,
        0
      ],
      [
        0,
        0,
        2,
        0,
        0,
        5,
        0,
        0,
        0,
        0,
        2,
        0
      ],
      [
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0
      ],
      [
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0
      ],
      [
        0,
        0,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    ],
    "test_output": [
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0
      ],
      [
        0,
        0,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0
      ],
      [
        0,
        0,
        2,
        2,
        5,
        0,
        0,
        0,
        2,
        2,
        2,
        0
      ],
      [
        0,
        0,
        2,
        2,
        0,
        0,
        0,
        5,
        2,
        2,
        2,
        0
      ],
      [
        0,
        0,
        2,
        2,
        0,
        0,
        5,
        0,
        2,
        2,
        2,
        0
      ],
      [
        0,
        0,
        2,
        2,
        0,
        5,
        0,
        0,
        2,
        2,
        2,
        0
      ],
      [
        0,
        0,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0
      ],
      [
        0,
        0,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0
      ],
      [
        0,
        0,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [],
    "training_predictions": {},
    "timed_out": false,
    "elapsed_time": 1.1570260524749756
  },
  "358ba94e": {
    "task_id": "358ba94e",
    "total_programs": 32,
    "valid_programs": 0,
    "valid_ratio": 0.0,
    "majority_output": null,
    "first_program_output": [
      [
        1,
        1,
        1,
        1,
        1
      ],
      [
        1,
        0,
        1,
        1,
        1
      ],
      [
        1,
        1,
        1,
        0,
        1
      ],
      [
        1,
        0,
        1,
        1,
        1
      ],
      [
        1,
        1,
        1,
        1,
        1
      ]
    ],
    "test_output": [
      [
        1,
        1,
        1,
        1,
        1
      ],
      [
        1,
        0,
        1,
        0,
        1
      ],
      [
        1,
        1,
        1,
        1,
        1
      ],
      [
        1,
        0,
        1,
        0,
        1
      ],
      [
        1,
        1,
        1,
        1,
        1
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [],
    "training_predictions": {},
    "timed_out": false,
    "elapsed_time": 1.154843807220459
  },
  "f3cdc58f": {
    "task_id": "f3cdc58f",
    "total_programs": 32,
    "valid_programs": 0,
    "valid_ratio": 0.0,
    "majority_output": null,
    "first_program_output": [
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        3,
        4,
        4,
        4,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        3,
        3,
        3,
        3,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        2,
        3,
        3,
        3,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        2,
        2,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        1,
        1,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    ],
    "test_output": [
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        2,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        1,
        2,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        1,
        2,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        1,
        2,
        3,
        4,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        1,
        2,
        3,
        4,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        1,
        2,
        3,
        4,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        1,
        2,
        3,
        4,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [],
    "training_predictions": {},
    "timed_out": false,
    "elapsed_time": 1.1904191970825195
  },
  "55059096": {
    "task_id": "55059096",
    "total_programs": 32,
    "valid_programs": 0,
    "valid_ratio": 0.0,
    "majority_output": null,
    "first_program_output": [
      [
        0,
        2,
        3,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        2,
        3,
        3,
        3,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        2,
        3,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        3,
        2,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        3,
        3,
        3,
        2,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        3,
        2,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        2,
        3,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        2,
        3,
        3,
        3,
        2,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        2,
        3,
        2,
        0,
        0,
        0,
        0,
        2,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        2,
        3,
        2,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        3,
        3,
        3,
        2
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        3,
        2,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0
      ]
    ],
    "test_output": [
      [
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        3,
        3,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        3,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        3,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        3,
        3,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        3,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        3,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        3,
        3,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        3,
        3,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [],
    "training_predictions": {},
    "timed_out": false,
    "elapsed_time": 1.1796278953552246
  },
  "c7d4e6ad": {
    "task_id": "c7d4e6ad",
    "total_programs": 32,
    "valid_programs": 1,
    "valid_ratio": 0.03125,
    "majority_output": [
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        2,
        0,
        0,
        0,
        2,
        2,
        0,
        2,
        0,
        0
      ],
      [
        2,
        0,
        0,
        2,
        2,
        2,
        2,
        2,
        0,
        0
      ],
      [
        3,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        3,
        0,
        0,
        3,
        3,
        3,
        0,
        0,
        0,
        0
      ],
      [
        3,
        0,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0
      ],
      [
        4,
        0,
        0,
        4,
        4,
        4,
        4,
        0,
        0,
        0
      ],
      [
        7,
        0,
        0,
        7,
        7,
        7,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    ],
    "first_program_output": [
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        2,
        0,
        5,
        0,
        5,
        0,
        0,
        0,
        0,
        0
      ],
      [
        2,
        0,
        5,
        5,
        5,
        0,
        0,
        0,
        0,
        0
      ],
      [
        3,
        0,
        0,
        5,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        3,
        0,
        0,
        5,
        5,
        0,
        0,
        0,
        0,
        0
      ],
      [
        3,
        0,
        0,
        0,
        5,
        0,
        0,
        0,
        0,
        0
      ],
      [
        4,
        0,
        0,
        5,
        5,
        0,
        0,
        0,
        0,
        0
      ],
      [
        7,
        0,
        0,
        5,
        5,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    ],
    "test_output": [
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        2,
        0,
        0,
        0,
        2,
        2,
        0,
        2,
        0,
        0
      ],
      [
        2,
        0,
        0,
        2,
        2,
        2,
        2,
        2,
        0,
        0
      ],
      [
        3,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        3,
        0,
        0,
        3,
        3,
        3,
        0,
        0,
        0,
        0
      ],
      [
        3,
        0,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0
      ],
      [
        4,
        0,
        0,
        4,
        4,
        4,
        4,
        0,
        0,
        0
      ],
      [
        7,
        0,
        0,
        7,
        7,
        7,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    ],
    "test_correct": true,
    "valid_program_examples": [
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    rows = len(grid)\n    cols = len(grid[0])\n    output_grid = [[0] * cols for _ in range(rows)]\n    \n    for r in range(rows):\n        for c in range(cols):\n            if c > 0 and c < cols - 1:\n                if grid[r][c] !=0 and grid[r][c] == 5:\n                   \n                    left_val = 0\n                    right_val = 0       \n                   \n                    col_left = c\n                    while col_left >= 0:\n                        if grid[r][col_left] != 5 and grid[r][col_left] != 0:\n                            left_val = grid[r][col_left]\n                            break\n                        col_left -=1   \n                    \n                    col_right = c\n                    while col_right < cols:\n                        if grid[r][col_right] != 5 and grid[r][col_right] != 0:\n                             right_val = grid[r][col_right]\n                             break\n                        col_right +=1\n                    \n\n                    if left_val != 0:\n                        output_grid[r][c] = left_val\n                    elif right_val !=0:\n                        output_grid[r][c] = right_val\n                    else: \n                        output_grid[r][c] = 5\n                else:\n                    output_grid[r][c] = grid[r][c]\n                        \n            else:\n                output_grid[r][c] = grid[r][c]\n    \n    return output_grid"
    ],
    "training_predictions": {
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    rows = len(grid)\n    cols = len(grid[0])\n    output_grid = [[0] * cols for _ in range(rows)]\n    \n    for r in range(rows):\n        for c in range(cols):\n            if c > 0 and c < cols - 1:\n                if grid[r][c] !=0 and grid[r][c] == 5:\n                   \n                    left_val = 0\n                    right_val = 0       \n                   \n                    col_left = c\n                    while col_left >= 0:\n                        if grid[r][col_left] != 5 and grid[r][col_left] != 0:\n                            left_val = grid[r][col_left]\n                            break\n                        col_left -=1   \n                    \n                    col_right = c\n                    while col_right < cols:\n                        if grid[r][col_right] != 5 and grid[r][col_right] != 0:\n                             right_val = grid[r][col_right]\n                             break\n                        col_right +=1\n                    \n\n                    if left_val != 0:\n                        output_grid[r][c] = left_val\n                    elif right_val !=0:\n                        output_grid[r][c] = right_val\n                    else: \n                        output_grid[r][c] = 5\n                else:\n                    output_grid[r][c] = grid[r][c]\n                        \n            else:\n                output_grid[r][c] = grid[r][c]\n    \n    return output_grid": [
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            0,
            0,
            8,
            0,
            0,
            0,
            0
          ],
          [
            8,
            0,
            0,
            8,
            8,
            8,
            0,
            0,
            0,
            0
          ],
          [
            2,
            0,
            0,
            2,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            0,
            0,
            2,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            2,
            0,
            0,
            2,
            2,
            2,
            2,
            0,
            0,
            0
          ],
          [
            2,
            0,
            0,
            0,
            0,
            0,
            2,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ],
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ],
          [
            9,
            0,
            0,
            0,
            0,
            9,
            0,
            0,
            0,
            0
          ],
          [
            9,
            0,
            0,
            0,
            0,
            9,
            0,
            0,
            0,
            0
          ],
          [
            6,
            0,
            0,
            0,
            6,
            6,
            0,
            0,
            0,
            0
          ],
          [
            6,
            0,
            0,
            6,
            6,
            6,
            0,
            0,
            0,
            0
          ],
          [
            6,
            0,
            0,
            6,
            0,
            6,
            0,
            0,
            0,
            0
          ],
          [
            4,
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            4,
            0,
            0,
            0,
            0,
            4,
            0,
            0,
            0,
            0
          ],
          [
            4,
            0,
            0,
            0,
            4,
            4,
            0,
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        ]
      ]
    },
    "timed_out": false,
    "elapsed_time": 1.1580040454864502
  },
  "4b6b68e5": {
    "task_id": "4b6b68e5",
    "total_programs": 32,
    "valid_programs": 0,
    "valid_ratio": 0.0,
    "majority_output": null,
    "first_program_output": [
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        2,
        2,
        6,
        6,
        2,
        2,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1
      ],
      [
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        2,
        2,
        2,
        0,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        2,
        0,
        6,
        0,
        0,
        8,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        3,
        0,
        0,
        6,
        0,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        2,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        3,
        3,
        3,
        0,
        0,
        0,
        0,
        3,
        0,
        0
      ],
      [
        0,
        2,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        2,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        8,
        0,
        3,
        0,
        0
      ],
      [
        0,
        2,
        0,
        0,
        1,
        0,
        6,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        3,
        8,
        0,
        0,
        0,
        0,
        0,
        3,
        0,
        0
      ],
      [
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        2,
        2,
        2,
        2,
        2,
        0,
        0,
        3,
        0,
        0,
        0,
        8,
        0,
        0,
        3,
        0,
        0
      ],
      [
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        1,
        0,
        3,
        0,
        0
      ],
      [
        0,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        3,
        3,
        3,
        3,
        0,
        0,
        0,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        6,
        0,
        8,
        6,
        3,
        0,
        0
      ],
      [
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        8,
        8,
        8,
        8,
        8,
        0,
        0,
        0,
        0,
        0,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        6,
        8,
        8,
        8,
        8,
        8,
        0,
        8,
        0,
        8,
        0,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        8,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        6
      ],
      [
        0,
        0,
        8,
        0,
        4,
        0,
        0,
        0,
        0,
        3,
        0,
        8,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        8,
        0,
        6,
        0,
        4,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        0,
        0
      ],
      [
        0,
        0,
        8,
        0,
        3,
        0,
        0,
        0,
        0,
        4,
        0,
        8,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        0,
        0,
        7,
        0,
        0
      ],
      [
        0,
        0,
        8,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        7,
        0,
        6,
        0,
        1,
        0,
        7,
        0,
        0
      ],
      [
        0,
        0,
        8,
        0,
        0,
        8,
        8,
        8,
        8,
        0,
        0,
        8,
        0,
        0,
        0,
        7,
        0,
        6,
        0,
        0,
        0,
        7,
        0,
        0
      ],
      [
        0,
        0,
        8,
        8,
        8,
        8,
        0,
        0,
        8,
        8,
        8,
        8,
        0,
        0,
        0,
        7,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        7,
        7,
        7,
        7,
        7,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        0,
        0,
        0
      ]
    ],
    "test_output": [
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        2,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        0,
        0,
        0,
        0,
        3,
        8,
        8,
        8,
        8,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        0,
        0,
        0,
        0,
        3,
        8,
        8,
        8,
        8,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        0,
        0,
        3,
        3,
        3,
        8,
        8,
        8,
        8,
        3,
        0,
        0
      ],
      [
        0,
        2,
        2,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        0,
        0,
        3,
        8,
        8,
        8,
        8,
        8,
        8,
        3,
        0,
        0
      ],
      [
        0,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        0,
        0,
        3,
        8,
        8,
        8,
        8,
        8,
        8,
        3,
        0,
        0
      ],
      [
        0,
        2,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        0,
        3,
        8,
        8,
        8,
        8,
        8,
        8,
        3,
        0,
        0
      ],
      [
        0,
        2,
        1,
        1,
        1,
        1,
        1,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        8,
        8,
        8,
        8,
        8,
        8,
        3,
        0,
        0
      ],
      [
        0,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        8,
        8,
        8,
        8,
        8,
        8,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        3,
        3,
        3,
        8,
        8,
        8,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        8,
        8,
        8,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        8,
        8,
        8,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        8,
        8,
        8,
        8,
        8,
        0,
        0,
        0,
        0,
        0,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        8,
        4,
        4,
        4,
        8,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        8,
        8,
        8,
        8,
        8,
        8,
        4,
        4,
        4,
        8,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        8,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        8,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        8,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        8,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        8,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        8,
        0,
        0,
        0,
        7,
        7,
        7,
        7,
        7,
        7,
        7,
        0,
        0
      ],
      [
        0,
        0,
        8,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        8,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        0,
        0,
        7,
        0,
        0
      ],
      [
        0,
        0,
        8,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        8,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        0,
        0,
        7,
        0,
        0
      ],
      [
        0,
        0,
        8,
        4,
        4,
        8,
        8,
        8,
        8,
        4,
        4,
        8,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        0,
        0,
        7,
        0,
        0
      ],
      [
        0,
        0,
        8,
        8,
        8,
        8,
        0,
        0,
        8,
        8,
        8,
        8,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        7,
        7,
        7,
        7,
        7,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [],
    "training_predictions": {},
    "timed_out": false,
    "elapsed_time": 1.272353172302246
  },
  "00576224": {
    "task_id": "00576224",
    "total_programs": 32,
    "valid_programs": 1,
    "valid_ratio": 0.03125,
    "majority_output": [
      [
        3,
        2,
        3,
        2,
        3,
        2
      ],
      [
        7,
        8,
        7,
        8,
        7,
        8
      ],
      [
        2,
        3,
        2,
        3,
        2,
        3
      ],
      [
        8,
        7,
        8,
        7,
        8,
        7
      ],
      [
        3,
        2,
        3,
        2,
        3,
        2
      ],
      [
        7,
        8,
        7,
        8,
        7,
        8
      ]
    ],
    "first_program_output": [
      [
        3,
        2,
        3,
        2,
        3,
        2
      ],
      [
        7,
        8,
        7,
        8,
        7,
        8
      ],
      [
        8,
        7,
        8,
        7,
        8,
        7
      ],
      [
        2,
        3,
        2,
        3,
        2,
        3
      ],
      [
        3,
        2,
        3,
        2,
        3,
        2
      ],
      [
        7,
        8,
        7,
        8,
        7,
        8
      ]
    ],
    "test_output": [
      [
        3,
        2,
        3,
        2,
        3,
        2
      ],
      [
        7,
        8,
        7,
        8,
        7,
        8
      ],
      [
        2,
        3,
        2,
        3,
        2,
        3
      ],
      [
        8,
        7,
        8,
        7,
        8,
        7
      ],
      [
        3,
        2,
        3,
        2,
        3,
        2
      ],
      [
        7,
        8,
        7,
        8,
        7,
        8
      ]
    ],
    "test_correct": true,
    "valid_program_examples": [
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    row1 = grid[0]\n    row2 = grid[1]\n    \n    new_grid = []\n    \n    new_row1 = row1 * 3\n    new_row2 = row2 * 3 \n    \n    new_grid.append(new_row1)\n    new_grid.append(new_row2)\n    new_grid.append([new_row1[1], new_row1[0], new_row1[1], new_row1[0], new_row1[1], new_row1[0]])\n    new_grid.append([new_row2[1], new_row2[0], new_row2[1], new_row2[0], new_row2[1], new_row2[0]])\n    new_grid.append(new_row1)\n    new_grid.append(new_row2)\n    \n    return new_grid"
    ],
    "training_predictions": {
      "from typing import List\n\ndef solve(grid: List[List[int]]) -> List[List[int]]:\n    row1 = grid[0]\n    row2 = grid[1]\n    \n    new_grid = []\n    \n    new_row1 = row1 * 3\n    new_row2 = row2 * 3 \n    \n    new_grid.append(new_row1)\n    new_grid.append(new_row2)\n    new_grid.append([new_row1[1], new_row1[0], new_row1[1], new_row1[0], new_row1[1], new_row1[0]])\n    new_grid.append([new_row2[1], new_row2[0], new_row2[1], new_row2[0], new_row2[1], new_row2[0]])\n    new_grid.append(new_row1)\n    new_grid.append(new_row2)\n    \n    return new_grid": [
        [
          [
            8,
            6,
            8,
            6,
            8,
            6
          ],
          [
            6,
            4,
            6,
            4,
            6,
            4
          ],
          [
            6,
            8,
            6,
            8,
            6,
            8
          ],
          [
            4,
            6,
            4,
            6,
            4,
            6
          ],
          [
            8,
            6,
            8,
            6,
            8,
            6
          ],
          [
            6,
            4,
            6,
            4,
            6,
            4
          ]
        ],
        [
          [
            7,
            9,
            7,
            9,
            7,
            9
          ],
          [
            4,
            3,
            4,
            3,
            4,
            3
          ],
          [
            9,
            7,
            9,
            7,
            9,
            7
          ],
          [
            3,
            4,
            3,
            4,
            3,
            4
          ],
          [
            7,
            9,
            7,
            9,
            7,
            9
          ],
          [
            4,
            3,
            4,
            3,
            4,
            3
          ]
        ]
      ]
    },
    "timed_out": false,
    "elapsed_time": 1.0957040786743164
  },
  "a04b2602": {
    "task_id": "a04b2602",
    "total_programs": 32,
    "valid_programs": 0,
    "valid_ratio": 0.0,
    "majority_output": null,
    "first_program_output": [
      [
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        3,
        1,
        2,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        1,
        0,
        0,
        1,
        3,
        3,
        1,
        1,
        2,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        3,
        3,
        3,
        3,
        1,
        3,
        1,
        2,
        0,
        0,
        3,
        3,
        1,
        2,
        1,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        2
      ],
      [
        0,
        0,
        0,
        1,
        3,
        3,
        1,
        2,
        1,
        3,
        1,
        0,
        2,
        1,
        1,
        2,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        2,
        1,
        3,
        3,
        1,
        3,
        3,
        3,
        0,
        0,
        3,
        3,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        1,
        3,
        3,
        1,
        3,
        3,
        3,
        3,
        0,
        0,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        3,
        3,
        1,
        2,
        1,
        3,
        3,
        3,
        0,
        0,
        3,
        3,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        1,
        0,
        0
      ],
      [
        0,
        0,
        0,
        3,
        3,
        1,
        1,
        3,
        3,
        3,
        3,
        0,
        0,
        3,
        1,
        2,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        1,
        2,
        0,
        0
      ],
      [
        0,
        0,
        0,
        3,
        1,
        2,
        2,
        1,
        3,
        3,
        3,
        0,
        0,
        3,
        3,
        1,
        3,
        3,
        1,
        1,
        3,
        3,
        3,
        3,
        1,
        0,
        0
      ],
      [
        0,
        0,
        0,
        3,
        3,
        1,
        1,
        3,
        3,
        3,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        3,
        3,
        3,
        3,
        1,
        3,
        1,
        3,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        3,
        3,
        3,
        1,
        2,
        1,
        2,
        1,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        3,
        1,
        1,
        3,
        1,
        3,
        1,
        3,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        2,
        1,
        2,
        2,
        1,
        3,
        3,
        3,
        3,
        0,
        0,
        0,
        2,
        0
      ]
    ],
    "test_output": [
      [
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        2,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        3,
        3,
        3,
        3,
        3,
        3,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        3,
        3,
        3,
        1,
        1,
        1,
        1,
        2,
        1,
        0,
        3,
        1,
        1,
        2,
        1,
        1,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        2
      ],
      [
        0,
        0,
        1,
        1,
        1,
        3,
        1,
        2,
        1,
        1,
        1,
        1,
        2,
        3,
        1,
        2,
        1,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        1,
        2,
        1,
        3,
        1,
        1,
        1,
        3,
        3,
        0,
        0,
        3,
        1,
        1,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        3,
        3,
        3,
        0,
        0,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        0
      ],
      [
        0,
        0,
        0,
        3,
        3,
        1,
        2,
        1,
        3,
        3,
        3,
        0,
        0,
        3,
        1,
        1,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        1,
        1,
        1,
        0
      ],
      [
        0,
        0,
        0,
        3,
        1,
        1,
        1,
        1,
        3,
        3,
        3,
        0,
        0,
        3,
        1,
        2,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        1,
        2,
        1,
        0
      ],
      [
        0,
        0,
        0,
        3,
        1,
        2,
        2,
        1,
        3,
        3,
        3,
        0,
        0,
        3,
        1,
        1,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        1,
        1,
        1,
        0
      ],
      [
        0,
        0,
        0,
        3,
        1,
        1,
        1,
        1,
        3,
        3,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        3,
        3,
        3,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        3,
        3,
        3,
        1,
        2,
        1,
        2,
        1,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        1,
        2,
        1,
        2,
        2,
        1,
        3,
        3,
        3,
        3,
        0,
        0,
        0,
        2,
        0
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [],
    "training_predictions": {},
    "timed_out": false,
    "elapsed_time": 1.1894278526306152
  },
  "e9c9d9a1": {
    "task_id": "e9c9d9a1",
    "total_programs": 32,
    "valid_programs": 0,
    "valid_ratio": 0.0,
    "majority_output": null,
    "first_program_output": [
      [
        2,
        2,
        2,
        0,
        0,
        0,
        3,
        0,
        0,
        3,
        0,
        4,
        4,
        4,
        4
      ],
      [
        2,
        2,
        2,
        0,
        0,
        0,
        3,
        0,
        0,
        3,
        0,
        4,
        4,
        4,
        4
      ],
      [
        2,
        2,
        2,
        0,
        0,
        0,
        3,
        0,
        0,
        3,
        0,
        4,
        4,
        4,
        4
      ],
      [
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3
      ],
      [
        0,
        0,
        3,
        0,
        7,
        7,
        7,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        3,
        0,
        7,
        7,
        7,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        3,
        0,
        7,
        7,
        7,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0
      ],
      [
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3
      ],
      [
        0,
        0,
        3,
        0,
        7,
        7,
        7,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        3,
        0,
        7,
        7,
        7,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0
      ],
      [
        3,
        3,
        3,
        3,
        7,
        7,
        7,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3
      ],
      [
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0
      ],
      [
        1,
        1,
        1,
        0,
        0,
        0,
        3,
        0,
        0,
        3,
        0,
        8,
        8,
        8,
        8
      ],
      [
        1,
        1,
        1,
        0,
        0,
        0,
        3,
        0,
        0,
        3,
        0,
        8,
        8,
        8,
        8
      ],
      [
        1,
        1,
        1,
        0,
        0,
        0,
        3,
        0,
        0,
        3,
        0,
        8,
        8,
        8,
        8
      ]
    ],
    "test_output": [
      [
        2,
        2,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        3,
        4,
        4,
        4,
        4,
        4
      ],
      [
        2,
        2,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        3,
        4,
        4,
        4,
        4,
        4
      ],
      [
        2,
        2,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        3,
        4,
        4,
        4,
        4,
        4
      ],
      [
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3
      ],
      [
        0,
        0,
        3,
        7,
        7,
        7,
        3,
        7,
        7,
        3,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        3,
        7,
        7,
        7,
        3,
        7,
        7,
        3,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        3,
        7,
        7,
        7,
        3,
        7,
        7,
        3,
        0,
        0,
        0,
        0,
        0
      ],
      [
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3
      ],
      [
        0,
        0,
        3,
        7,
        7,
        7,
        3,
        7,
        7,
        3,
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        3,
        7,
        7,
        7,
        3,
        7,
        7,
        3,
        0,
        0,
        0,
        0,
        0
      ],
      [
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3
      ],
      [
        1,
        1,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        3,
        8,
        8,
        8,
        8,
        8
      ],
      [
        1,
        1,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        3,
        8,
        8,
        8,
        8,
        8
      ],
      [
        1,
        1,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        3,
        8,
        8,
        8,
        8,
        8
      ],
      [
        1,
        1,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        3,
        8,
        8,
        8,
        8,
        8
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [],
    "training_predictions": {},
    "timed_out": false,
    "elapsed_time": 1.1305649280548096
  },
  "ef26cbf6": {
    "task_id": "ef26cbf6",
    "total_programs": 32,
    "valid_programs": 0,
    "valid_ratio": 0.0,
    "majority_output": null,
    "first_program_output": null,
    "test_output": [
      [
        6,
        0,
        0,
        4,
        0,
        0,
        0
      ],
      [
        0,
        6,
        0,
        4,
        0,
        6,
        0
      ],
      [
        6,
        6,
        0,
        4,
        0,
        0,
        0
      ],
      [
        4,
        4,
        4,
        4,
        4,
        4,
        4
      ],
      [
        0,
        0,
        2,
        4,
        0,
        0,
        0
      ],
      [
        0,
        2,
        2,
        4,
        0,
        2,
        0
      ],
      [
        2,
        0,
        0,
        4,
        0,
        0,
        0
      ],
      [
        4,
        4,
        4,
        4,
        4,
        4,
        4
      ],
      [
        8,
        8,
        0,
        4,
        0,
        0,
        0
      ],
      [
        0,
        8,
        0,
        4,
        0,
        8,
        0
      ],
      [
        8,
        8,
        8,
        4,
        0,
        0,
        0
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [],
    "training_predictions": {},
    "timed_out": false,
    "elapsed_time": 1.1467618942260742
  },
  "7ee1c6ea": {
    "task_id": "7ee1c6ea",
    "total_programs": 32,
    "valid_programs": 0,
    "valid_ratio": 0.0,
    "majority_output": null,
    "first_program_output": [
      [
        7,
        0,
        1,
        1,
        7,
        0,
        0,
        7,
        7,
        7
      ],
      [
        1,
        0,
        1,
        1,
        7,
        0,
        0,
        7,
        7,
        7
      ],
      [
        1,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        7
      ],
      [
        0,
        5,
        0,
        0,
        1,
        0,
        1,
        7,
        5,
        1
      ],
      [
        7,
        5,
        7,
        1,
        7,
        0,
        1,
        7,
        5,
        1
      ],
      [
        7,
        5,
        7,
        7,
        0,
        1,
        7,
        1,
        5,
        1
      ],
      [
        1,
        5,
        0,
        1,
        7,
        0,
        7,
        7,
        5,
        0
      ],
      [
        0,
        5,
        7,
        7,
        1,
        1,
        1,
        1,
        5,
        7
      ],
      [
        0,
        5,
        1,
        7,
        7,
        7,
        7,
        0,
        5,
        0
      ],
      [
        0,
        1,
        7,
        1,
        0,
        7,
        0,
        0,
        7,
        7
      ]
    ],
    "test_output": [
      [
        7,
        0,
        1,
        1,
        7,
        0,
        0,
        7,
        7,
        7
      ],
      [
        1,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        7
      ],
      [
        1,
        5,
        0,
        0,
        7,
        0,
        7,
        1,
        5,
        7
      ],
      [
        0,
        5,
        1,
        7,
        1,
        0,
        7,
        1,
        5,
        1
      ],
      [
        7,
        5,
        1,
        1,
        0,
        7,
        1,
        7,
        5,
        1
      ],
      [
        7,
        5,
        0,
        7,
        1,
        0,
        1,
        1,
        5,
        1
      ],
      [
        1,
        5,
        1,
        1,
        7,
        7,
        7,
        7,
        5,
        0
      ],
      [
        0,
        5,
        7,
        1,
        1,
        1,
        1,
        0,
        5,
        7
      ],
      [
        0,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        0
      ],
      [
        0,
        1,
        7,
        1,
        0,
        7,
        0,
        0,
        7,
        7
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [],
    "training_predictions": {},
    "timed_out": false,
    "elapsed_time": 1.1401240825653076
  },
  "e9ac8c9e": {
    "task_id": "e9ac8c9e",
    "error": "Task timed out after 30.0 seconds",
    "timed_out": true
  },
  "1a2e2828": {
    "task_id": "1a2e2828",
    "total_programs": 32,
    "valid_programs": 0,
    "valid_ratio": 0.0,
    "majority_output": null,
    "first_program_output": [
      [
        0
      ]
    ],
    "test_output": [
      [
        7
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [],
    "training_predictions": {},
    "timed_out": false,
    "elapsed_time": 1.0942227840423584
  },
  "770cc55f": {
    "task_id": "770cc55f",
    "total_programs": 32,
    "valid_programs": 0,
    "valid_ratio": 0.0,
    "majority_output": null,
    "first_program_output": [
      [
        7,
        7,
        7,
        7,
        7
      ],
      [
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0
      ],
      [
        2,
        2,
        2,
        2,
        2
      ],
      [
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        7,
        7,
        0,
        0
      ]
    ],
    "test_output": [
      [
        7,
        7,
        7,
        7,
        7
      ],
      [
        0,
        4,
        4,
        0,
        0
      ],
      [
        0,
        4,
        4,
        0,
        0
      ],
      [
        0,
        4,
        4,
        0,
        0
      ],
      [
        0,
        4,
        4,
        0,
        0
      ],
      [
        2,
        2,
        2,
        2,
        2
      ],
      [
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        0,
        0,
        0,
        0
      ],
      [
        0,
        7,
        7,
        0,
        0
      ]
    ],
    "test_correct": false,
    "valid_program_examples": [],
    "training_predictions": {},
    "timed_out": false,
    "elapsed_time": 1.125011920928955
  }
}